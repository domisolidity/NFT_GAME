language: generic

sudo: required

# @ Test 수행 준비 ---- 
# 앱을 도커 환경에서 실행 중이니 travis ci에 도커 환경으로 만들 것임을 선언
services:
    - docker

# 구성된 도커 환경에서 dockerfile.dev를 이용해 도커 이미지 생성
before_install:
    - docker build -t achievedw/test-app -f ./frontend/Dockerfile.dev ./frontend

# @ Test 수행 -----
# 생성된 테스트 이미지를 이용해 테스트 수행
script:
    - docker run -e CI=true achievedw/test-app npm test

# @ 운영버전 이미지 빌드
# 테스트 성공 시 프로젝트의 운영버전 이미지들을 빌드.
script:
    - docker build -t achievedw/docker-frontend ./frontend
    - docker build -t achievedw/docker-backend ./backend
    - docker build -t achievedw/docker-nginx ./nginx
    # 도커 hub 로그인
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin
    # 도커 hub에 push
    - docker push achievedw/docker-frontend
    - docker push achievedw/docker-backend
    - docker push achievedw/docker-nginx
# deploy:
#     provider: elasticbeanstalk
#     region: "ap-northeast-2"
#     app: "docker-fullstack-app"
#     env: "DockerFullstackApp-env"
#     bucket_name: elasticbeanstalk-ap-northeast-2-972153559337
#     bucket_path: "docker-fullstack-app"
#     on:
#         branch: main
branches:
  only:
  - master
  - kdw

deploy:
    provider: elasticbeanstalk
    region: "ap-northeast-2"
    app: "doremifa-p2e-dapp"
    env: "Doremifap2edapp-env"
    bucket_name: elasticbeanstalk-ap-northeast-2-720487358469
    bucket_path: "doremifa-p2e-dapp"
    on:
        branch: kdw
    access_key_id: ${{secrets.AWS_ACCESS_KEY}}
    secret_access_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}


run:  echo "${{secrets.DOCKER_HUB_PASSWORD"}} | docker login -u "${{secrets.DOCKER_HUB_ID}}" --password-stdin